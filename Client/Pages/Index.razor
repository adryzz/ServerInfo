@page "/"
@using ServerInfo.Types
@using Radzen.Blazor
@using Radzen
@using System.Threading
@inject HttpClient Http
@inject NotificationService NotificationService

<h1 Style="margin-bottom: 20px">Overview</h1>

The server has been running for @time.Days days, @time.Hours hours, @time.Minutes minutes and @time.Seconds seconds, or simply @time.ToString("hh':'mm':'ss")
<div class="col-xl-6" Style="margin-top: 20px">
    <h3>Average CPU usage: @Math.Round(cpu.AverageUsagePercentage, 2)%</h3>
    <RadzenProgressBar Value=@Math.Round(cpu.AverageUsagePercentage, 2) Max=100 Style="margin-bottom: 20px;" />
    
    <h3>Average memory usage: @Utils.RemoveUnit(Utils.FromBytesToString((long)((memory.MemTotal + memory.SwapTotal) - (memory.MemAvailable + memory.SwapFree))))/@Utils.FromBytesToString((long)(memory.MemTotal + memory.SwapTotal))</h3>
    <RadzenProgressBar Value=@memPerc Max=100 Style="margin-bottom: 20px;" />
</div>

@code {
    private UptimeInfo uptime;
    private Timer localTimer;
    private MemoryInfo memory;
    private CPUInfo cpu;
    private Timer timer;
    private int memPerc;
    TimeSpan time;

    protected override async Task OnInitializedAsync()
    {
        uptime = await Http.GetFromJsonAsync<UptimeInfo>("api/v1/uptimeinfo");
        await RefreshDataAsync();
        time = uptime.Uptime;
        localTimer = new Timer(RefreshLocalDataAsync, new AutoResetEvent(true), 500, 500);
        timer = new Timer(RefreshDataAsyncTimer, new AutoResetEvent(true), 2500, 2500);
    }

    private async void RefreshLocalDataAsync(object stateInfo)
    {
        time = DateTime.Now.Subtract(uptime.StartupTime);
        StateHasChanged();
    }
    private async void RefreshDataAsyncTimer(object stateInfo)
    {
        RefreshDataAsync();
        StateHasChanged();
    }
    private async Task RefreshDataAsync()
    {
        memory = await Http.GetFromJsonAsync<MemoryInfo>("api/v1/memoryinfo");
        memPerc = (int)(((decimal)((memory.MemTotal + memory.SwapTotal) - (memory.MemAvailable + memory.SwapFree)) / (memory.MemTotal + memory.SwapTotal)) * 100);
        cpu = await Http.GetFromJsonAsync<CPUInfo>("api/v1/cpuinfo");
    }

    public void Dispose()
    {
        localTimer.Dispose();
        timer.Dispose();
    }
}