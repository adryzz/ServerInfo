@page "/memory"
@using ServerInfo.Types
@using Radzen.Blazor
@using System.Threading
@inject HttpClient Http

<h1>Memory usage</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (memory.MemTotal == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="col-xl-6">
        <h3>RAM usage: @Utils.RemoveUnit(Utils.FromBytesToString((long)(memory.MemTotal - memory.MemAvailable)))/@Utils.FromBytesToString((long)memory.MemTotal)</h3>
        <RadzenProgressBar Value=@ramPerc Max=100 Style="margin-bottom: 20px" />
        <h3>Swap usage: @Utils.RemoveUnit(Utils.FromBytesToString((long)(memory.SwapTotal - memory.SwapFree)))/@Utils.FromBytesToString((long)memory.SwapTotal)</h3>
        <RadzenProgressBar Value=@swapPerc Max=100 Style="margin-bottom: 20px" />
    </div>
}

@code {
    private MemoryInfo memory;
    private Timer timer;
    private int ramPerc;
    private int swapPerc;
    protected override async Task OnInitializedAsync()
    {
        memory = await Http.GetFromJsonAsync<MemoryInfo>("api/v1/memoryinfo");
        ramPerc = (int)(((decimal)(memory.MemTotal - memory.MemAvailable) / memory.MemTotal) * 100);
        swapPerc = (int)(((decimal)(memory.SwapTotal - memory.SwapFree) / memory.SwapTotal) * 100);
        timer = new Timer(RefreshDataAsync, new AutoResetEvent(true), 2500, 2500);
    }

    private async void RefreshDataAsync(object stateInfo)
    {
        memory = await Http.GetFromJsonAsync<MemoryInfo>("api/v1/memoryinfo");
        ramPerc = (int)(((decimal)(memory.MemTotal - memory.MemAvailable) / memory.MemTotal) * 100);
        swapPerc = (int)(((decimal)(memory.SwapTotal - memory.SwapFree) / memory.SwapTotal) * 100);
        StateHasChanged();
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}
